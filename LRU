#include <iostream>
#include <unordered_map>
#include <list>
using namespace std;

#define MAX_FRAME 10
#define MAX_PAGINAS 100
#define MAX_STRING 100

int memoriaFisica[MAX_FRAME];
int memoriaVirtual[MAX_PAGINAS];
int punteroLRU = 0;
double hits = 0;
double faults = 0;
list<int> lruList;
unordered_map<int, list<int>::iterator> lruMap;

void inicializarMemoria(int frame, int paginas) {
    for (int i = 0; i < frame; i++) {
        memoriaFisica[i] = -1;
    }
    for (int i = 0; i < paginas; i++) {
        memoriaVirtual[i] = i;
    }
}

bool llenaMemoriaFisica(int frame) {
    for (int i = 0; i < frame; i++) {
        if (memoriaFisica[i] == -1) {
            return false;
        }
    }
    return true;
}

bool paginaEnMemoriaFisica(int pagina, int frame) {
    for (int i = 0; i < frame; i++) {
        if (memoriaFisica[i] == pagina) {
            return true;
        }
    }
    return false;
}


int reemplazarPaginaLRU(int nuevaPagina, int frame) {
    int paginaReemplazada = lruList.back();
    lruList.pop_back();
    for (int i = 0; i < frame; i++) {
        if (memoriaFisica[i] == paginaReemplazada) {
            memoriaFisica[i] = nuevaPagina;
            break;
        }
    }
    return paginaReemplazada;
}


void actualizarLRU(int pagina) {
    if (lruMap.find(pagina) != lruMap.end()) {
        lruList.erase(lruMap[pagina]);
    }
    lruList.push_front(pagina);
    lruMap[pagina] = lruList.begin();
}


void imprimirMemoriaFisica(int frame) {
    for (int i = 0; i < frame; i++) {
        cout << "Marco " << i << ": ";
        if (memoriaFisica[i] == -1) {
            cout << "Vacío" << endl;
        } else {
            cout << "Página " << memoriaFisica[i] << endl;
        }
    }
}

void pageHit() {
    hits++;
}

void pageFault() {
    faults++;
}

int main() {
    int frame = 0;
    int paginas = 0;
    int numstring = paginas;
    cout << "Ingrese el número de marcos de página en la memoria física: ";
    cin >> frame;

    cout << "Ingrese el número total de páginas en la memoria virtual: ";
    cin >> paginas;
    numstring = paginas;

    if (frame > MAX_FRAME || paginas > MAX_PAGINAS || numstring > MAX_STRING) {
        cout << "Los valores ingresados son demasiado grandes. Asegúrese de que no excedan los límites." << endl;
        return 1;
    }

    int string[MAX_STRING];
    cout << "Ingrese las páginas para la simulación separadas por espacios: " << endl;
    for (int i = 0; i < numstring; i++) {
        cout << "Ingrese la pagina " << i + 1 << ": ";
        cin >> string[i];
    }

    inicializarMemoria(frame, paginas);

    for (int i = 0; i < numstring; i++) {
        int pagina = string[i];
        if (paginaEnMemoriaFisica(pagina, frame)) {
            cout << endl;
            pageHit();
            actualizarLRU(pagina);
        } else {
            cout << endl;
            pageFault();
            if (llenaMemoriaFisica(frame)) {
                int paginaReemplazada = reemplazarPaginaLRU(pagina, frame);
                cout << "Se reemplazó la página " << paginaReemplazada << " con la página " << pagina << endl;
            } else {
                for (int j = 0; j < frame; j++) {
                    if (memoriaFisica[j] == -1) {
                        memoriaFisica[j] = pagina;
                        actualizarLRU(pagina);
                        break;
                    }
                }
            }
        }
        cout << endl;
        imprimirMemoriaFisica(frame);
    }

    float pageMiss = (faults / numstring) * 100;
    float hitRatio = (hits / numstring) * 100;
    cout << "                  " << endl;
    cout << "Total Page Hits: " << hits << endl;
    cout << "Total Page Faults: " << faults << endl;
    cout << "HIT RATIO: " << hitRatio << "%" << endl;
    cout << "Page Miss: " << pageMiss << "%" << endl;

    return 0;
}
